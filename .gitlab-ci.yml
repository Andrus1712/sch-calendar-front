stages:
  - build
  - test
  - deploy

# Job de compilación
build-job:
  image: node:latest
  stage: build
  script:
    - echo "Preparing the build environment..."
    - rm -rf node_modules package-lock.json
    - npm install
    - echo "Compiling the project with Vite..."
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

# Job de pruebas
test-job:
  image: node:latest
  stage: test
  script:
    - echo "Preparing the test environment..."
    - rm -rf node_modules package-lock.json
    - npm install
    - echo "Running tests..."
      - node -e "console.log(require('./package.json').scripts.test)"
    - npm test
  dependencies:
    - build-job

# Job de despliegue
deploy-job:
  image: node:latest
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME =~ /^v\d+\.\d+\.\d+.*$/
      changes:
        - package.json
  script:
    - npm ci

    # Si no se incluye .npmrc en el repositorio, generar uno temporal configurado para publicar en el registro de NPM de GitLab
    - |
      if [[ ! -f .npmrc ]]; then
        echo 'No .npmrc found! Creating one now. Please review the following link for more information: https://docs.gitlab.com/ee/user/packages/npm_registry/index.html#project-level-npm-endpoint-1'
        {
          echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
          echo "${CI_API_V4_URL#http*:}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
        } >> .npmrc
      fi
    - echo "Created the following .npmrc:"; cat .npmrc
    # Extraer valores de package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")

    # Validar que el nombre del paquete esté correctamente limitado al namespace raíz del proyecto.
    # Para más información, ver https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention'
        exit 1
      fi

    # Comparar la versión en package.json con todas las versiones publicadas.
    # Si la versión de package.json no ha sido publicada aún, ejecutar `npm publish`.
    # Si $SIGSTORE_ID_TOKEN está configurado, este template generará un documento de procedencia.
    # Para más información, consulta la documentación: https://docs.gitlab.com/ee/ci/yaml/signing_examples/
    - |
      if [[ "$(npm view ${NPM_PACKAGE_NAME} versions)" != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        if [[ -n "${SIGSTORE_ID_TOKEN}" ]]; then
          npm publish --provenance
        else
          npm publish
        fi
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi
  dependencies:
    - build-job
    - test-job
